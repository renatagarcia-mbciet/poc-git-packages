plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.github.sherter.google-java-format" version "0.9"
    id 'java'
    id 'jacoco'
}

group = 'br.com.gitpackages'
version = '1.0.0'
sourceCompatibility = '14'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.0")
    set('mapstructVersion', '1.4.2.Final')
    set('lombokMapstructBindingVersion', '0.2.0')

    set('fixtureFactoryVersion', '3.1.0')

    set('restAssuredVersion', '4.2.0')
    set('assertjVersion', '3.21.0')

    set('wiremockStandaloneVersion', '2.27.2')
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    compileOnly 'org.projectlombok:lombok'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.data:spring-data-commons'
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testImplementation 'org.mockito:mockito-inline:3.12.4'
    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'
    testImplementation "org.testcontainers:postgresql:1.16.3"
    testImplementation('org.springframework.boot:spring-boot-starter-test') { exclude group: 'org.junit.vintage', module: 'junit-vintage-engine' }
    testImplementation 'org.awaitility:awaitility:4.1.1'
    testImplementation 'org.jeasy:easy-random-core:5.0.0'

    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    testImplementation "io.rest-assured:json-path:${restAssuredVersion}"
    testImplementation "io.rest-assured:xml-path:${restAssuredVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockStandaloneVersion}"

    testImplementation "br.com.six2six:fixture-factory:${fixtureFactoryVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split(',')
    }
}

test {
    useJUnitPlatform {
        if (!(System.getProperty("includeTags") ?: "").isBlank()) {
            includeTags System.getProperty("includeTags")
        }

        if (!(System.getProperty("excludeTags") ?: "").isBlank()) {
            excludeTags System.getProperty("excludeTags")
        }
    }

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        csv.required = false
    }

}

sourceSets {
    testIntegration {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/testIntegration/java')
        }
        resources.srcDir file('src/testIntegration/resources')
    }
}

configurations {
    testIntegrationCompile.extendsFrom testCompile
    testIntegrationRuntime.extendsFrom testRuntime
    testIntegrationRuntimeOnly.extendsFrom testRuntimeOnly
    testIntegrationImplementation.extendsFrom testImplementation
}

task testIntegration(type: Test) {
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath

    useJUnitPlatform()
}

test.doFirst {
    systemProperty 'spring.profiles.active', 'dev, test'
}

rootProject.tasks.named("processTestIntegrationResources") {
    duplicatesStrategy = 'include'
}